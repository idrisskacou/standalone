import{e as s,f as o,g as r,h as a,k as d}from"./chunk-JEQNNXGW.js";var g=":host{display:block;position:relative;visibility:visible;z-index:1;font-family:var(--font-body-1-font-family, 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif);font-size:var(--font-body-1-font-size, 1rem);font-weight:var(--font-body-1-font-weight, 400);letter-spacing:var(--font-body-1-letter-spacing, 0.005em);line-height:var(--line-height-base, 1.5rem);text-align:left}:host([hidden]){display:none}:host(.hidden){display:none;position:absolute;visibility:hidden;z-index:-1}",b=(()=>{let i=class{constructor(e){d(this,e),this.ruxRegisterPanels=a(this,"ruxregisterpanels",7)}connectedCallback(){this.el.setAttribute("style","position: relative; width: 100%;"),this._getSlottedChildren=this._getSlottedChildren.bind(this)}_getSlottedChildren(){var e,t;let n=(t=(e=this.el)===null||e===void 0?void 0:e.shadowRoot)===null||t===void 0?void 0:t.querySelector("slot");if(n){let h=n.assignedNodes({flatten:!0}),l=Array.prototype.filter.call(h,c=>c.nodeType==Node.ELEMENT_NODE);return this._registerTabPanels(l),l}else return[]}_registerTabPanels(e){this.ruxRegisterPanels.emit(e)}render(){return s(o,null,s("slot",{onSlotchange:this._getSlottedChildren}))}get el(){return r(this)}};return i.style=g,i})();export{b as rux_tab_panels};
