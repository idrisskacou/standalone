{
  "version": 3,
  "sources": ["../../../../../../node_modules/@astrouxds/astro-web-components/dist/esm/rux-segmented-button.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-416188d1.js';\nconst ruxSegmentedButtonCss = \":host{display:block;box-sizing:border-box;font-family:var(--font-body-1-font-family, 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif);font-size:var(--font-body-1-font-size, 1rem);font-weight:var(--font-body-1-font-weight, 400);letter-spacing:var(--font-body-1-letter-spacing, 0.005em);line-height:var(--line-height-base, 1.5rem);text-align:left}:host([disabled]){opacity:var(--opacity-disabled, 40%);cursor:not-allowed;pointer-events:none}:host([disabled]) label{border-color:var(--color-background-interactive-default, #4dacff)}:host([hidden]){display:none}*,*::before,*::after{box-sizing:inherit}.rux-segmented-button{display:inline-flex;padding:var(--spacing-0, 0rem);margin:var(--spacing-0, 0rem);list-style:none;border-radius:var(--radius-base, 3px);background-color:var(--color-background-base-default, #101923)}.rux-segmented-button__segment{width:auto;margin:var(--spacing-0, 0rem);padding:var(--spacing-0, 0rem)}.rux-segmented-button__segment:first-child{border-radius:var(--radius-base, 3px) 0 0 var(--radius-base, 3px)}.rux-segmented-button__segment:last-child{border-radius:0 var(--radius-base, 3px) var(--radius-base, 3px) 0}.rux-segmented-button__segment+.rux-segmented-button__segment label{border-right:none}.rux-segmented-button__segment:hover+.rux-segmented-button__segment label{border-left-color:var(--color-background-interactive-hover, #92cbff)}.rux-segmented-button__segment.--focused{outline:var(--border-width-focus-default, 1px) solid var(--color-border-focus-default, #da9ce7);outline-offset:var(--spacing-focus-default, 0.125rem);z-index:1}.rux-segmented-button__segment label{display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;width:100%;margin:var(--spacing-0, 0rem);border:1px solid var(--color-background-interactive-default, #4dacff);color:var(--color-background-interactive-default, #4dacff);background-color:var(--color-background-base-default, #101923);font-family:var(--font-control-body-1-font-family, 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif);font-size:var(--font-control-body-1-font-size, 1rem);letter-spacing:var(--font-control-body-1-letter-spacing, 0.005em);font-weight:var(--font-control-body-1-font-weight, 400);line-height:var(--font-control-body-1-line-height, calc(20 / 16));-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.rux-segmented-button__segment label:hover{background-color:var(--color-background-surface-hover, #1c3851);border-color:var(--color-background-interactive-hover, #92cbff);color:var(--color-background-interactive-default, #4dacff);outline:none}.rux-segmented-button__segment .rux-segmented-button-label{height:calc(var(--spacing-8, 2rem) + var(--spacing-1, 0.25rem));padding:var(--spacing-2, 0.5rem) var(--spacing-4, 1rem);cursor:pointer}.rux-segmented-button__segment .rux-segmented-button-label--small{height:calc(var(--spacing-6, 1.5rem) + var(--spacing-1, 0.25rem));padding:var(--spacing-1, 0.25rem) var(--spacing-4, 1rem)}.rux-segmented-button__segment .rux-segmented-button-label--large{height:calc(var(--spacing-10, 2.5rem) + var(--spacing-1, 0.25rem));padding:var(--spacing-3, 0.75rem) var(--spacing-4, 1rem)}.rux-segmented-button__segment input{position:absolute;opacity:0}.rux-segmented-button__segment input:checked+label{background-color:var(--color-background-surface-selected, #1c3f5e);color:var(--color-text-primary, #ffffff)}.rux-segmented-button__segment input:checked:hover+label{background-color:var(--color-background-surface-selected, #1c3f5e);color:var(--color-text-primary, #ffffff);border-color:var(--color-background-interactive-hover, #92cbff)}.rux-segmented-button__segment:first-child label{border-radius:var(--radius-base, 3px) 0 0 var(--radius-base, 3px);border-right:none}.rux-segmented-button__segment:first-child label:hover{border-color:var(--color-background-interactive-hover, #92cbff)}.rux-segmented-button__segment:last-child label{border-radius:0 var(--radius-base, 3px) var(--radius-base, 3px) 0;border-right:1px solid var(--color-background-interactive-default, #4dacff)}.rux-segmented-button__segment:last-child label:hover{border-right-color:var(--color-background-interactive-hover, #92cbff)}\";\n\n// Used to give each segmented button element a unique name, which allows for proper tabbing.\nlet name = 0;\nconst RuxSegmentedButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxChange = createEvent(this, \"ruxchange\", 7);\n    this.segBtnName = `rux-segmented-button-${++name}`;\n    this.data = [];\n    this.selected = '';\n    this.size = undefined;\n    this.disabled = false;\n  }\n  onSelectedChange(newValue) {\n    //if 'selected' is changed programatically rather than on click, set new selected value\n    this._setSelected(newValue);\n  }\n  onDataChange(newValue) {\n    if (newValue) {\n      const initialSelection = this.data.find(segment => segment.selected);\n      if (initialSelection) {\n        this._setSelected(initialSelection.label);\n      } else {\n        if (!this.selected) {\n          this._setSelected(this.data[0].label);\n        }\n      }\n    }\n  }\n  connectedCallback() {\n    this._handleChange = this._handleChange.bind(this);\n    const initialSelection = this.data.find(segment => segment.selected) || this.data[0];\n    if (initialSelection) {\n      this._setSelected(initialSelection.label);\n    }\n  }\n  _handleChange(e) {\n    const el = e.target;\n    this._setSelected(el.value);\n    this.ruxChange.emit(el.value);\n  }\n  _setSelected(label) {\n    this.data.map(item => {\n      item.selected = item.label === label;\n    });\n    this.selected = label;\n  }\n  _slugify(label) {\n    label = label.replace(/^\\s+|\\s+$/g, ''); // trim\n    label = label.toLowerCase();\n    label = label.replace(/[^a-z0-9 -]/g, '') // remove invalid chars\n    .replace(/\\s+/g, '-') // collapse whitespace and replace by -\n    .replace(/-+/g, '-'); // collapse dashes\n    return label;\n  }\n  _isSelected(label) {\n    if (this.selected === label) {\n      return true;\n    }\n    const selectedData = this.data.find(item => item.label === label);\n    if (selectedData && selectedData.selected) {\n      return true;\n    }\n    return false;\n  }\n  _handleFocus(e) {\n    var _a;\n    const target = e.currentTarget;\n    target.matches(':focus-visible') ? (_a = target.closest('li')) === null || _a === void 0 ? void 0 : _a.classList.add('--focused') : null;\n  }\n  _handleBlur(e) {\n    var _a;\n    const target = e.currentTarget;\n    (_a = target.closest('li')) === null || _a === void 0 ? void 0 : _a.classList.remove('--focused');\n  }\n  render() {\n    return h(\"ul\", {\n      class: {\n        'rux-segmented-button': true,\n        'rux-segmented-button--small': this.size === 'small',\n        'rux-segmented-button--large': this.size === 'large'\n      }\n    }, this.data.map(item => h(\"li\", {\n      class: \"rux-segmented-button__segment\"\n    }, h(\"input\", {\n      type: \"radio\",\n      name: this.segBtnName,\n      id: this._slugify(item.label),\n      value: item.label,\n      checked: this._isSelected(item.label),\n      \"data-label\": item.label,\n      onChange: this._handleChange,\n      disabled: this.disabled,\n      onFocus: this._handleFocus,\n      onBlur: this._handleBlur\n    }), h(\"label\", {\n      htmlFor: this._slugify(item.label),\n      part: \"label\",\n      class: {\n        'rux-segmented-button-label': true,\n        'rux-segmented-button-label--small': this.size === 'small',\n        'rux-segmented-button-label--large': this.size === 'large'\n      }\n    }, item.label))));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"selected\": [\"onSelectedChange\"],\n      \"data\": [\"onDataChange\"]\n    };\n  }\n};\nRuxSegmentedButton.style = ruxSegmentedButtonCss;\nexport { RuxSegmentedButton as rux_segmented_button };"],
  "mappings": "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",
  "names": []
}
