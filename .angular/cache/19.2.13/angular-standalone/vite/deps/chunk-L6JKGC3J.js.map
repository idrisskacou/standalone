{
  "version": 3,
  "sources": ["../../../../../../node_modules/@astrouxds/astro-web-components/dist/esm/helpers-902063ee.js"],
  "sourcesContent": ["import { f as formatInTimeZone } from './index-fe8e5d4f.js';\nimport { d as differenceInHours, a as differenceInMinutes } from './index-1ff547d6.js';\nimport { r as requiredArgs, t as toDate } from './index-33004084.js';\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nfunction addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nfunction addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nfunction addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}\n\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nfunction subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}\nasync function validateTimezone(timezone) {\n  return new Promise((resolve, reject) => {\n    try {\n      formatInTimeZone(new Date(), timezone, 'MM/dd');\n      resolve(true);\n    } catch (e) {\n      reject(false);\n    }\n  });\n}\n// Fixes bug in date-fn's subDays() function when crossing a DST transition:\n// https://github.com/date-fns/date-fns/issues/571\nfunction agnosticAddDays(date, amount) {\n  const originalTZO = date.getTimezoneOffset();\n  const endDate = addDays(date, amount);\n  const endTZO = endDate.getTimezoneOffset();\n  const dstDiff = originalTZO - endTZO;\n  return dstDiff >= 0 ? addMinutes(endDate, dstDiff) : subMinutes(endDate, Math.abs(dstDiff));\n}\nfunction dateRange(start, end, interval, intervalValue = 1, timezone = 'UTC') {\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n  // Prevents unnecessary error when setting range to the future\n  if (startDate > endDate) {\n    return [];\n  }\n  if (interval === 'day') {\n    //differenceInHours used here to avoid DST issues\n    //https://github.com/date-fns/date-fns/blob/main/src/differenceInDays/index.ts#L17C2-L17C2\n    const days = Math.floor(differenceInHours(endDate, startDate) / 24) | 0;\n    const output = [...Array(days).keys()].map(i => {\n      const time = agnosticAddDays(startDate, i);\n      const formattedTime = formatInTimeZone(time, timezone, 'MM/dd');\n      return [formattedTime];\n    });\n    return output;\n  }\n  if (interval === 'hour') {\n    let days = differenceInHours(endDate, startDate);\n    days = days / intervalValue;\n    const output = [...Array(days).keys()].map(i => {\n      const time = addHours(startDate, i);\n      const formattedTime = formatInTimeZone(time, timezone, 'HH:mm');\n      const dayFormattedTime = formatInTimeZone(time, timezone, 'MM/dd');\n      return [formattedTime, dayFormattedTime];\n    });\n    return output;\n  }\n  if (interval === 'minute') {\n    let days = differenceInMinutes(endDate, startDate);\n    days = days / intervalValue;\n    const output = [...Array(days).keys()].map(i => {\n      const time = addMinutes(startDate, i);\n      const formattedTime = formatInTimeZone(time, timezone, 'HH:mm');\n      const dayFormattedTime = formatInTimeZone(time, timezone, 'MM/dd');\n      return [formattedTime, dayFormattedTime];\n    });\n    return output;\n  }\n  return [];\n}\nexport { addMilliseconds as a, dateRange as d, toInteger as t, validateTimezone as v };"],
  "mappings": "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",
  "names": []
}
