{
  "version": 3,
  "sources": ["../../../../../../node_modules/@astrouxds/astro-web-components/dist/esm/rux-ruler.entry.js"],
  "sourcesContent": ["import { r as registerInstance, h, H as Host, g as getElement } from './index-416188d1.js';\nimport { d as dateRange } from './helpers-902063ee.js';\nimport './index-fe8e5d4f.js';\nimport './index-bf9fd6cc.js';\nimport './index-1ff547d6.js';\nimport './index-33004084.js';\nconst ruxRulerCss = \":host{display:contents}.rux-track{display:contents}.ruler-time{display:flex;align-items:center;padding:12px 20px}.ruler-new-day-cell{background-color:var(--color-background-base-default, #101923);font-size:var(--font-size-sm, 0.875rem);display:block;text-align:center;padding:5px}.ruler-new-day-display{display:block;font-size:var(--font-size-sm, 0.875rem)}\";\nconst RuxRuler = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.timePattern = /^00:.+$/;\n    this.interval = '';\n    this.start = '';\n    this.end = '';\n    this.timezone = 'UTC';\n    this.showStartOfDay = false;\n  }\n  get dateRange() {\n    return dateRange(new Date(this.start), new Date(this.end), this.interval, 1, this.timezone);\n  }\n  getColumn(index) {\n    let unitOfTime = 60;\n    if (this.interval === 'day') {\n      unitOfTime = 24;\n    }\n    const start = unitOfTime * index + 2;\n    const end = start + unitOfTime;\n    return `${unitOfTime * index + 2} / ${end}`;\n  }\n  shouldShowDate(time) {\n    if (this.interval !== 'hour') {\n      return false;\n    }\n    if (!this.showStartOfDay) {\n      return false;\n    }\n    return this.timePattern.test(time);\n  }\n  render() {\n    return h(Host, null, h(\"div\", {\n      class: \"rux-ruler rux-track\"\n    }, this.dateRange.map(([time, newDayDate], index) => {\n      const newDay = this.timePattern.test(time) ? newDayDate : '';\n      return h(\"span\", {\n        key: index,\n        class: {\n          'ruler-time': true,\n          'ruler-new-day-cell': this.shouldShowDate(time)\n        },\n        style: {\n          gridRow: '1',\n          gridColumn: this.getColumn(index)\n        }\n      }, time, this.shouldShowDate(time) ? h(\"span\", {\n        class: \"ruler-new-day-display\"\n      }, newDay) : '');\n    })));\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nRuxRuler.style = ruxRulerCss;\nexport { RuxRuler as rux_ruler };"],
  "mappings": ";;;;;;;;;;;;;;;;AAMA,IAAM,cAAc;AACpB,IAAM,WAAW,MAAM;AAAA,EACrB,YAAY,SAAS;AACnB,qBAAiB,MAAM,OAAO;AAC9B,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,WAAW;AAChB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,IAAI,YAAY;AACd,WAAO,UAAU,IAAI,KAAK,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,GAAG,KAAK,UAAU,GAAG,KAAK,QAAQ;AAAA,EAC5F;AAAA,EACA,UAAU,OAAO;AACf,QAAI,aAAa;AACjB,QAAI,KAAK,aAAa,OAAO;AAC3B,mBAAa;AAAA,IACf;AACA,UAAM,QAAQ,aAAa,QAAQ;AACnC,UAAM,MAAM,QAAQ;AACpB,WAAO,GAAG,aAAa,QAAQ,CAAC,MAAM,GAAG;AAAA,EAC3C;AAAA,EACA,eAAe,MAAM;AACnB,QAAI,KAAK,aAAa,QAAQ;AAC5B,aAAO;AAAA,IACT;AACA,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,YAAY,KAAK,IAAI;AAAA,EACnC;AAAA,EACA,SAAS;AACP,WAAO,EAAE,MAAM,MAAM,EAAE,OAAO;AAAA,MAC5B,OAAO;AAAA,IACT,GAAG,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,UAAU,GAAG,UAAU;AACnD,YAAM,SAAS,KAAK,YAAY,KAAK,IAAI,IAAI,aAAa;AAC1D,aAAO,EAAE,QAAQ;AAAA,QACf,KAAK;AAAA,QACL,OAAO;AAAA,UACL,cAAc;AAAA,UACd,sBAAsB,KAAK,eAAe,IAAI;AAAA,QAChD;AAAA,QACA,OAAO;AAAA,UACL,SAAS;AAAA,UACT,YAAY,KAAK,UAAU,KAAK;AAAA,QAClC;AAAA,MACF,GAAG,MAAM,KAAK,eAAe,IAAI,IAAI,EAAE,QAAQ;AAAA,QAC7C,OAAO;AAAA,MACT,GAAG,MAAM,IAAI,EAAE;AAAA,IACjB,CAAC,CAAC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,KAAK;AACP,WAAO,WAAW,IAAI;AAAA,EACxB;AACF;AACA,SAAS,QAAQ;",
  "names": []
}
